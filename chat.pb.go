// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.8.0
// source: chat.proto

package twitch

import (
	fmt "fmt"
	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	io "io"
	strconv "strconv"
)

type MessageTypeTwitchChatEvent int32

const (
	MessageTypeTwitchChatEvent_TWITCH_CHAT_EVENT_TYPE_MESSAGE_IN MessageTypeTwitchChatEvent = 0
)

// Enum value maps for MessageTypeTwitchChatEvent.
var (
	MessageTypeTwitchChatEvent_name = map[int32]string{
		0: "TWITCH_CHAT_EVENT_TYPE_MESSAGE_IN",
	}
	MessageTypeTwitchChatEvent_value = map[string]int32{
		"TWITCH_CHAT_EVENT_TYPE_MESSAGE_IN": 0,
	}
)

func (x MessageTypeTwitchChatEvent) Enum() *MessageTypeTwitchChatEvent {
	p := new(MessageTypeTwitchChatEvent)
	*p = x
	return p
}

func (x MessageTypeTwitchChatEvent) String() string {
	name, valid := MessageTypeTwitchChatEvent_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type MessageTypeTwitchChatRequest int32

const (
	MessageTypeTwitchChatRequest_TWITCH_CHAT_REQUEST_TYPE_SEND_REQ  MessageTypeTwitchChatRequest = 0
	MessageTypeTwitchChatRequest_TWITCH_CHAT_REQUEST_TYPE_SEND_RESP MessageTypeTwitchChatRequest = 1
)

// Enum value maps for MessageTypeTwitchChatRequest.
var (
	MessageTypeTwitchChatRequest_name = map[int32]string{
		0: "TWITCH_CHAT_REQUEST_TYPE_SEND_REQ",
		1: "TWITCH_CHAT_REQUEST_TYPE_SEND_RESP",
	}
	MessageTypeTwitchChatRequest_value = map[string]int32{
		"TWITCH_CHAT_REQUEST_TYPE_SEND_REQ":  0,
		"TWITCH_CHAT_REQUEST_TYPE_SEND_RESP": 1,
	}
)

func (x MessageTypeTwitchChatRequest) Enum() *MessageTypeTwitchChatRequest {
	p := new(MessageTypeTwitchChatRequest)
	*p = x
	return p
}

func (x MessageTypeTwitchChatRequest) String() string {
	name, valid := MessageTypeTwitchChatRequest_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type ChatConfig struct {
	unknownFields []byte
	Enabled       bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                                // allow disabling chat
	Profile       string `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`                                 // default chat client and channel
	MessagePrefix string `protobuf:"bytes,3,opt,name=message_prefix,json=messagePrefix,proto3" json:"messagePrefix,omitempty"` // a prefix to add to all chat messages. Useful to make it clear that the message is coming from a bot
}

func (x *ChatConfig) Reset() {
	*x = ChatConfig{}
}

func (*ChatConfig) ProtoMessage() {}

func (x *ChatConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ChatConfig) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *ChatConfig) GetMessagePrefix() string {
	if x != nil {
		return x.MessagePrefix
	}
	return ""
}

type TwitchChatRequestSendRequest struct {
	unknownFields []byte
	Text          string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Channel       string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Profile       string `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *TwitchChatRequestSendRequest) Reset() {
	*x = TwitchChatRequestSendRequest{}
}

func (*TwitchChatRequestSendRequest) ProtoMessage() {}

func (x *TwitchChatRequestSendRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TwitchChatRequestSendRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *TwitchChatRequestSendRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

type TwitchChatRequestSendResponse struct {
	unknownFields []byte
}

func (x *TwitchChatRequestSendResponse) Reset() {
	*x = TwitchChatRequestSendResponse{}
}

func (*TwitchChatRequestSendResponse) ProtoMessage() {}

func (m *ChatConfig) CloneVT() *ChatConfig {
	if m == nil {
		return (*ChatConfig)(nil)
	}
	r := new(ChatConfig)
	r.Enabled = m.Enabled
	r.Profile = m.Profile
	r.MessagePrefix = m.MessagePrefix
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ChatConfig) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *TwitchChatRequestSendRequest) CloneVT() *TwitchChatRequestSendRequest {
	if m == nil {
		return (*TwitchChatRequestSendRequest)(nil)
	}
	r := new(TwitchChatRequestSendRequest)
	r.Text = m.Text
	r.Channel = m.Channel
	r.Profile = m.Profile
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TwitchChatRequestSendRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *TwitchChatRequestSendResponse) CloneVT() *TwitchChatRequestSendResponse {
	if m == nil {
		return (*TwitchChatRequestSendResponse)(nil)
	}
	r := new(TwitchChatRequestSendResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TwitchChatRequestSendResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *ChatConfig) EqualVT(that *ChatConfig) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if this.Profile != that.Profile {
		return false
	}
	if this.MessagePrefix != that.MessagePrefix {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ChatConfig) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ChatConfig)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TwitchChatRequestSendRequest) EqualVT(that *TwitchChatRequestSendRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Text != that.Text {
		return false
	}
	if this.Channel != that.Channel {
		return false
	}
	if this.Profile != that.Profile {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TwitchChatRequestSendRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*TwitchChatRequestSendRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TwitchChatRequestSendResponse) EqualVT(that *TwitchChatRequestSendResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TwitchChatRequestSendResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*TwitchChatRequestSendResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the MessageTypeTwitchChatEvent to JSON.
func (x MessageTypeTwitchChatEvent) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), MessageTypeTwitchChatEvent_name)
}

// MarshalText marshals the MessageTypeTwitchChatEvent to text.
func (x MessageTypeTwitchChatEvent) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), MessageTypeTwitchChatEvent_name)), nil
}

// MarshalJSON marshals the MessageTypeTwitchChatEvent to JSON.
func (x MessageTypeTwitchChatEvent) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageTypeTwitchChatEvent from JSON.
func (x *MessageTypeTwitchChatEvent) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(MessageTypeTwitchChatEvent_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read MessageTypeTwitchChatEvent enum: %v", err)
		return
	}
	*x = MessageTypeTwitchChatEvent(v)
}

// UnmarshalText unmarshals the MessageTypeTwitchChatEvent from text.
func (x *MessageTypeTwitchChatEvent) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), MessageTypeTwitchChatEvent_value)
	if err != nil {
		return err
	}
	*x = MessageTypeTwitchChatEvent(i)
	return nil
}

// UnmarshalJSON unmarshals the MessageTypeTwitchChatEvent from JSON.
func (x *MessageTypeTwitchChatEvent) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageTypeTwitchChatRequest to JSON.
func (x MessageTypeTwitchChatRequest) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), MessageTypeTwitchChatRequest_name)
}

// MarshalText marshals the MessageTypeTwitchChatRequest to text.
func (x MessageTypeTwitchChatRequest) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), MessageTypeTwitchChatRequest_name)), nil
}

// MarshalJSON marshals the MessageTypeTwitchChatRequest to JSON.
func (x MessageTypeTwitchChatRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageTypeTwitchChatRequest from JSON.
func (x *MessageTypeTwitchChatRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(MessageTypeTwitchChatRequest_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read MessageTypeTwitchChatRequest enum: %v", err)
		return
	}
	*x = MessageTypeTwitchChatRequest(v)
}

// UnmarshalText unmarshals the MessageTypeTwitchChatRequest from text.
func (x *MessageTypeTwitchChatRequest) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), MessageTypeTwitchChatRequest_value)
	if err != nil {
		return err
	}
	*x = MessageTypeTwitchChatRequest(i)
	return nil
}

// UnmarshalJSON unmarshals the MessageTypeTwitchChatRequest from JSON.
func (x *MessageTypeTwitchChatRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ChatConfig message to JSON.
func (x *ChatConfig) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Enabled || s.HasField("enabled") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("enabled")
		s.WriteBool(x.Enabled)
	}
	if x.Profile != "" || s.HasField("profile") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("profile")
		s.WriteString(x.Profile)
	}
	if x.MessagePrefix != "" || s.HasField("messagePrefix") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("messagePrefix")
		s.WriteString(x.MessagePrefix)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ChatConfig to JSON.
func (x *ChatConfig) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ChatConfig message from JSON.
func (x *ChatConfig) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "enabled":
			s.AddField("enabled")
			x.Enabled = s.ReadBool()
		case "profile":
			s.AddField("profile")
			x.Profile = s.ReadString()
		case "message_prefix", "messagePrefix":
			s.AddField("message_prefix")
			x.MessagePrefix = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the ChatConfig from JSON.
func (x *ChatConfig) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the TwitchChatRequestSendRequest message to JSON.
func (x *TwitchChatRequestSendRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Text != "" || s.HasField("text") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("text")
		s.WriteString(x.Text)
	}
	if x.Channel != "" || s.HasField("channel") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("channel")
		s.WriteString(x.Channel)
	}
	if x.Profile != "" || s.HasField("profile") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("profile")
		s.WriteString(x.Profile)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the TwitchChatRequestSendRequest to JSON.
func (x *TwitchChatRequestSendRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the TwitchChatRequestSendRequest message from JSON.
func (x *TwitchChatRequestSendRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "text":
			s.AddField("text")
			x.Text = s.ReadString()
		case "channel":
			s.AddField("channel")
			x.Channel = s.ReadString()
		case "profile":
			s.AddField("profile")
			x.Profile = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the TwitchChatRequestSendRequest from JSON.
func (x *TwitchChatRequestSendRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the TwitchChatRequestSendResponse message to JSON.
func (x *TwitchChatRequestSendResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the TwitchChatRequestSendResponse to JSON.
func (x *TwitchChatRequestSendResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the TwitchChatRequestSendResponse message from JSON.
func (x *TwitchChatRequestSendResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the TwitchChatRequestSendResponse from JSON.
func (x *TwitchChatRequestSendResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *ChatConfig) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatConfig) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ChatConfig) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.MessagePrefix) > 0 {
		i -= len(m.MessagePrefix)
		copy(dAtA[i:], m.MessagePrefix)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.MessagePrefix)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Profile) > 0 {
		i -= len(m.Profile)
		copy(dAtA[i:], m.Profile)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Profile)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TwitchChatRequestSendRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitchChatRequestSendRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *TwitchChatRequestSendRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Profile) > 0 {
		i -= len(m.Profile)
		copy(dAtA[i:], m.Profile)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Profile)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TwitchChatRequestSendResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitchChatRequestSendResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *TwitchChatRequestSendResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *ChatConfig) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Profile)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.MessagePrefix)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *TwitchChatRequestSendRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Profile)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *TwitchChatRequestSendResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *ChatConfig) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessagePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitchChatRequestSendRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitchChatRequestSendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitchChatRequestSendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitchChatRequestSendResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitchChatRequestSendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitchChatRequestSendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
